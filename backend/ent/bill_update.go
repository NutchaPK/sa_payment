// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/theuo/app/ent/bill"
	"github.com/theuo/app/ent/billstatus"
	"github.com/theuo/app/ent/payment"
	"github.com/theuo/app/ent/predicate"
	"github.com/theuo/app/ent/user"
)

// BillUpdate is the builder for updating Bill entities.
type BillUpdate struct {
	config
	hooks      []Hook
	mutation   *BillMutation
	predicates []predicate.Bill
}

// Where adds a new predicate for the builder.
func (bu *BillUpdate) Where(ps ...predicate.Bill) *BillUpdate {
	bu.predicates = append(bu.predicates, ps...)
	return bu
}

// SetAmount sets the Amount field.
func (bu *BillUpdate) SetAmount(i int) *BillUpdate {
	bu.mutation.ResetAmount()
	bu.mutation.SetAmount(i)
	return bu
}

// AddAmount adds i to Amount.
func (bu *BillUpdate) AddAmount(i int) *BillUpdate {
	bu.mutation.AddAmount(i)
	return bu
}

// SetBillstatusID sets the billstatus edge to BillStatus by id.
func (bu *BillUpdate) SetBillstatusID(id int) *BillUpdate {
	bu.mutation.SetBillstatusID(id)
	return bu
}

// SetNillableBillstatusID sets the billstatus edge to BillStatus by id if the given value is not nil.
func (bu *BillUpdate) SetNillableBillstatusID(id *int) *BillUpdate {
	if id != nil {
		bu = bu.SetBillstatusID(*id)
	}
	return bu
}

// SetBillstatus sets the billstatus edge to BillStatus.
func (bu *BillUpdate) SetBillstatus(b *BillStatus) *BillUpdate {
	return bu.SetBillstatusID(b.ID)
}

// SetPaymentsID sets the payments edge to Payment by id.
func (bu *BillUpdate) SetPaymentsID(id int) *BillUpdate {
	bu.mutation.SetPaymentsID(id)
	return bu
}

// SetNillablePaymentsID sets the payments edge to Payment by id if the given value is not nil.
func (bu *BillUpdate) SetNillablePaymentsID(id *int) *BillUpdate {
	if id != nil {
		bu = bu.SetPaymentsID(*id)
	}
	return bu
}

// SetPayments sets the payments edge to Payment.
func (bu *BillUpdate) SetPayments(p *Payment) *BillUpdate {
	return bu.SetPaymentsID(p.ID)
}

// SetResidentID sets the resident edge to User by id.
func (bu *BillUpdate) SetResidentID(id int) *BillUpdate {
	bu.mutation.SetResidentID(id)
	return bu
}

// SetNillableResidentID sets the resident edge to User by id if the given value is not nil.
func (bu *BillUpdate) SetNillableResidentID(id *int) *BillUpdate {
	if id != nil {
		bu = bu.SetResidentID(*id)
	}
	return bu
}

// SetResident sets the resident edge to User.
func (bu *BillUpdate) SetResident(u *User) *BillUpdate {
	return bu.SetResidentID(u.ID)
}

// Mutation returns the BillMutation object of the builder.
func (bu *BillUpdate) Mutation() *BillMutation {
	return bu.mutation
}

// ClearBillstatus clears the billstatus edge to BillStatus.
func (bu *BillUpdate) ClearBillstatus() *BillUpdate {
	bu.mutation.ClearBillstatus()
	return bu
}

// ClearPayments clears the payments edge to Payment.
func (bu *BillUpdate) ClearPayments() *BillUpdate {
	bu.mutation.ClearPayments()
	return bu
}

// ClearResident clears the resident edge to User.
func (bu *BillUpdate) ClearResident() *BillUpdate {
	bu.mutation.ClearResident()
	return bu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (bu *BillUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BillMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BillUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BillUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BillUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bill.Table,
			Columns: bill.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bill.FieldID,
			},
		},
	}
	if ps := bu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bill.FieldAmount,
		})
	}
	if value, ok := bu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bill.FieldAmount,
		})
	}
	if bu.mutation.BillstatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.BillstatusTable,
			Columns: []string{bill.BillstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: billstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BillstatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.BillstatusTable,
			Columns: []string{bill.BillstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: billstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bill.PaymentsTable,
			Columns: []string{bill.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bill.PaymentsTable,
			Columns: []string{bill.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.ResidentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.ResidentTable,
			Columns: []string{bill.ResidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ResidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.ResidentTable,
			Columns: []string{bill.ResidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bill.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BillUpdateOne is the builder for updating a single Bill entity.
type BillUpdateOne struct {
	config
	hooks    []Hook
	mutation *BillMutation
}

// SetAmount sets the Amount field.
func (buo *BillUpdateOne) SetAmount(i int) *BillUpdateOne {
	buo.mutation.ResetAmount()
	buo.mutation.SetAmount(i)
	return buo
}

// AddAmount adds i to Amount.
func (buo *BillUpdateOne) AddAmount(i int) *BillUpdateOne {
	buo.mutation.AddAmount(i)
	return buo
}

// SetBillstatusID sets the billstatus edge to BillStatus by id.
func (buo *BillUpdateOne) SetBillstatusID(id int) *BillUpdateOne {
	buo.mutation.SetBillstatusID(id)
	return buo
}

// SetNillableBillstatusID sets the billstatus edge to BillStatus by id if the given value is not nil.
func (buo *BillUpdateOne) SetNillableBillstatusID(id *int) *BillUpdateOne {
	if id != nil {
		buo = buo.SetBillstatusID(*id)
	}
	return buo
}

// SetBillstatus sets the billstatus edge to BillStatus.
func (buo *BillUpdateOne) SetBillstatus(b *BillStatus) *BillUpdateOne {
	return buo.SetBillstatusID(b.ID)
}

// SetPaymentsID sets the payments edge to Payment by id.
func (buo *BillUpdateOne) SetPaymentsID(id int) *BillUpdateOne {
	buo.mutation.SetPaymentsID(id)
	return buo
}

// SetNillablePaymentsID sets the payments edge to Payment by id if the given value is not nil.
func (buo *BillUpdateOne) SetNillablePaymentsID(id *int) *BillUpdateOne {
	if id != nil {
		buo = buo.SetPaymentsID(*id)
	}
	return buo
}

// SetPayments sets the payments edge to Payment.
func (buo *BillUpdateOne) SetPayments(p *Payment) *BillUpdateOne {
	return buo.SetPaymentsID(p.ID)
}

// SetResidentID sets the resident edge to User by id.
func (buo *BillUpdateOne) SetResidentID(id int) *BillUpdateOne {
	buo.mutation.SetResidentID(id)
	return buo
}

// SetNillableResidentID sets the resident edge to User by id if the given value is not nil.
func (buo *BillUpdateOne) SetNillableResidentID(id *int) *BillUpdateOne {
	if id != nil {
		buo = buo.SetResidentID(*id)
	}
	return buo
}

// SetResident sets the resident edge to User.
func (buo *BillUpdateOne) SetResident(u *User) *BillUpdateOne {
	return buo.SetResidentID(u.ID)
}

// Mutation returns the BillMutation object of the builder.
func (buo *BillUpdateOne) Mutation() *BillMutation {
	return buo.mutation
}

// ClearBillstatus clears the billstatus edge to BillStatus.
func (buo *BillUpdateOne) ClearBillstatus() *BillUpdateOne {
	buo.mutation.ClearBillstatus()
	return buo
}

// ClearPayments clears the payments edge to Payment.
func (buo *BillUpdateOne) ClearPayments() *BillUpdateOne {
	buo.mutation.ClearPayments()
	return buo
}

// ClearResident clears the resident edge to User.
func (buo *BillUpdateOne) ClearResident() *BillUpdateOne {
	buo.mutation.ClearResident()
	return buo
}

// Save executes the query and returns the updated entity.
func (buo *BillUpdateOne) Save(ctx context.Context) (*Bill, error) {

	var (
		err  error
		node *Bill
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BillMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BillUpdateOne) SaveX(ctx context.Context) *Bill {
	b, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return b
}

// Exec executes the query on the entity.
func (buo *BillUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BillUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BillUpdateOne) sqlSave(ctx context.Context) (b *Bill, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bill.Table,
			Columns: bill.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bill.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Bill.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := buo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bill.FieldAmount,
		})
	}
	if value, ok := buo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bill.FieldAmount,
		})
	}
	if buo.mutation.BillstatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.BillstatusTable,
			Columns: []string{bill.BillstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: billstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BillstatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.BillstatusTable,
			Columns: []string{bill.BillstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: billstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bill.PaymentsTable,
			Columns: []string{bill.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   bill.PaymentsTable,
			Columns: []string{bill.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.ResidentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.ResidentTable,
			Columns: []string{bill.ResidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ResidentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.ResidentTable,
			Columns: []string{bill.ResidentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	b = &Bill{config: buo.config}
	_spec.Assign = b.assignValues
	_spec.ScanValues = b.scanValues()
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bill.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return b, nil
}
