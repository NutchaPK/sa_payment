// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/theuo/app/ent/payment"
	"github.com/theuo/app/ent/paytype"
)

// PayTypeCreate is the builder for creating a PayType entity.
type PayTypeCreate struct {
	config
	mutation *PayTypeMutation
	hooks    []Hook
}

// SetTypeInfo sets the TypeInfo field.
func (ptc *PayTypeCreate) SetTypeInfo(s string) *PayTypeCreate {
	ptc.mutation.SetTypeInfo(s)
	return ptc
}

// AddPaymentIDs adds the payments edge to Payment by ids.
func (ptc *PayTypeCreate) AddPaymentIDs(ids ...int) *PayTypeCreate {
	ptc.mutation.AddPaymentIDs(ids...)
	return ptc
}

// AddPayments adds the payments edges to Payment.
func (ptc *PayTypeCreate) AddPayments(p ...*Payment) *PayTypeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptc.AddPaymentIDs(ids...)
}

// Mutation returns the PayTypeMutation object of the builder.
func (ptc *PayTypeCreate) Mutation() *PayTypeMutation {
	return ptc.mutation
}

// Save creates the PayType in the database.
func (ptc *PayTypeCreate) Save(ctx context.Context) (*PayType, error) {
	if _, ok := ptc.mutation.TypeInfo(); !ok {
		return nil, &ValidationError{Name: "TypeInfo", err: errors.New("ent: missing required field \"TypeInfo\"")}
	}
	if v, ok := ptc.mutation.TypeInfo(); ok {
		if err := paytype.TypeInfoValidator(v); err != nil {
			return nil, &ValidationError{Name: "TypeInfo", err: fmt.Errorf("ent: validator failed for field \"TypeInfo\": %w", err)}
		}
	}
	var (
		err  error
		node *PayType
	)
	if len(ptc.hooks) == 0 {
		node, err = ptc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PayTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ptc.mutation = mutation
			node, err = ptc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ptc.hooks) - 1; i >= 0; i-- {
			mut = ptc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *PayTypeCreate) SaveX(ctx context.Context) *PayType {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ptc *PayTypeCreate) sqlSave(ctx context.Context) (*PayType, error) {
	pt, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pt.ID = int(id)
	return pt, nil
}

func (ptc *PayTypeCreate) createSpec() (*PayType, *sqlgraph.CreateSpec) {
	var (
		pt    = &PayType{config: ptc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: paytype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: paytype.FieldID,
			},
		}
	)
	if value, ok := ptc.mutation.TypeInfo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paytype.FieldTypeInfo,
		})
		pt.TypeInfo = value
	}
	if nodes := ptc.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paytype.PaymentsTable,
			Columns: []string{paytype.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pt, _spec
}
