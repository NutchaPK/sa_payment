// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/theuo/app/ent/payment"
	"github.com/theuo/app/ent/paymentstatus"
	"github.com/theuo/app/ent/predicate"
)

// PaymentStatusQuery is the builder for querying PaymentStatus entities.
type PaymentStatusQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.PaymentStatus
	// eager-loading edges.
	withPayments *PaymentQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (psq *PaymentStatusQuery) Where(ps ...predicate.PaymentStatus) *PaymentStatusQuery {
	psq.predicates = append(psq.predicates, ps...)
	return psq
}

// Limit adds a limit step to the query.
func (psq *PaymentStatusQuery) Limit(limit int) *PaymentStatusQuery {
	psq.limit = &limit
	return psq
}

// Offset adds an offset step to the query.
func (psq *PaymentStatusQuery) Offset(offset int) *PaymentStatusQuery {
	psq.offset = &offset
	return psq
}

// Order adds an order step to the query.
func (psq *PaymentStatusQuery) Order(o ...OrderFunc) *PaymentStatusQuery {
	psq.order = append(psq.order, o...)
	return psq
}

// QueryPayments chains the current query on the payments edge.
func (psq *PaymentStatusQuery) QueryPayments() *PaymentQuery {
	query := &PaymentQuery{config: psq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentstatus.Table, paymentstatus.FieldID, psq.sqlQuery()),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, paymentstatus.PaymentsTable, paymentstatus.PaymentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PaymentStatus entity in the query. Returns *NotFoundError when no paymentstatus was found.
func (psq *PaymentStatusQuery) First(ctx context.Context) (*PaymentStatus, error) {
	psSlice, err := psq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(psSlice) == 0 {
		return nil, &NotFoundError{paymentstatus.Label}
	}
	return psSlice[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (psq *PaymentStatusQuery) FirstX(ctx context.Context) *PaymentStatus {
	ps, err := psq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return ps
}

// FirstID returns the first PaymentStatus id in the query. Returns *NotFoundError when no id was found.
func (psq *PaymentStatusQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = psq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{paymentstatus.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (psq *PaymentStatusQuery) FirstXID(ctx context.Context) int {
	id, err := psq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only PaymentStatus entity in the query, returns an error if not exactly one entity was returned.
func (psq *PaymentStatusQuery) Only(ctx context.Context) (*PaymentStatus, error) {
	psSlice, err := psq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(psSlice) {
	case 1:
		return psSlice[0], nil
	case 0:
		return nil, &NotFoundError{paymentstatus.Label}
	default:
		return nil, &NotSingularError{paymentstatus.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (psq *PaymentStatusQuery) OnlyX(ctx context.Context) *PaymentStatus {
	ps, err := psq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return ps
}

// OnlyID returns the only PaymentStatus id in the query, returns an error if not exactly one id was returned.
func (psq *PaymentStatusQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = psq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{paymentstatus.Label}
	default:
		err = &NotSingularError{paymentstatus.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (psq *PaymentStatusQuery) OnlyIDX(ctx context.Context) int {
	id, err := psq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PaymentStatusSlice.
func (psq *PaymentStatusQuery) All(ctx context.Context) ([]*PaymentStatus, error) {
	if err := psq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return psq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (psq *PaymentStatusQuery) AllX(ctx context.Context) []*PaymentStatus {
	psSlice, err := psq.All(ctx)
	if err != nil {
		panic(err)
	}
	return psSlice
}

// IDs executes the query and returns a list of PaymentStatus ids.
func (psq *PaymentStatusQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := psq.Select(paymentstatus.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (psq *PaymentStatusQuery) IDsX(ctx context.Context) []int {
	ids, err := psq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (psq *PaymentStatusQuery) Count(ctx context.Context) (int, error) {
	if err := psq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return psq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (psq *PaymentStatusQuery) CountX(ctx context.Context) int {
	count, err := psq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (psq *PaymentStatusQuery) Exist(ctx context.Context) (bool, error) {
	if err := psq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return psq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (psq *PaymentStatusQuery) ExistX(ctx context.Context) bool {
	exist, err := psq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (psq *PaymentStatusQuery) Clone() *PaymentStatusQuery {
	return &PaymentStatusQuery{
		config:     psq.config,
		limit:      psq.limit,
		offset:     psq.offset,
		order:      append([]OrderFunc{}, psq.order...),
		unique:     append([]string{}, psq.unique...),
		predicates: append([]predicate.PaymentStatus{}, psq.predicates...),
		// clone intermediate query.
		sql:  psq.sql.Clone(),
		path: psq.path,
	}
}

//  WithPayments tells the query-builder to eager-loads the nodes that are connected to
// the "payments" edge. The optional arguments used to configure the query builder of the edge.
func (psq *PaymentStatusQuery) WithPayments(opts ...func(*PaymentQuery)) *PaymentStatusQuery {
	query := &PaymentQuery{config: psq.config}
	for _, opt := range opts {
		opt(query)
	}
	psq.withPayments = query
	return psq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		PaymentStatus string `json:"PaymentStatus,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PaymentStatus.Query().
//		GroupBy(paymentstatus.FieldPaymentStatus).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (psq *PaymentStatusQuery) GroupBy(field string, fields ...string) *PaymentStatusGroupBy {
	group := &PaymentStatusGroupBy{config: psq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return psq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		PaymentStatus string `json:"PaymentStatus,omitempty"`
//	}
//
//	client.PaymentStatus.Query().
//		Select(paymentstatus.FieldPaymentStatus).
//		Scan(ctx, &v)
//
func (psq *PaymentStatusQuery) Select(field string, fields ...string) *PaymentStatusSelect {
	selector := &PaymentStatusSelect{config: psq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return psq.sqlQuery(), nil
	}
	return selector
}

func (psq *PaymentStatusQuery) prepareQuery(ctx context.Context) error {
	if psq.path != nil {
		prev, err := psq.path(ctx)
		if err != nil {
			return err
		}
		psq.sql = prev
	}
	return nil
}

func (psq *PaymentStatusQuery) sqlAll(ctx context.Context) ([]*PaymentStatus, error) {
	var (
		nodes       = []*PaymentStatus{}
		_spec       = psq.querySpec()
		loadedTypes = [1]bool{
			psq.withPayments != nil,
		}
	)
	_spec.ScanValues = func() []interface{} {
		node := &PaymentStatus{config: psq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, psq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := psq.withPayments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*PaymentStatus)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Payment(func(s *sql.Selector) {
			s.Where(sql.InValues(paymentstatus.PaymentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.paymentstatus_id
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "paymentstatus_id" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "paymentstatus_id" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Payments = append(node.Edges.Payments, n)
		}
	}

	return nodes, nil
}

func (psq *PaymentStatusQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := psq.querySpec()
	return sqlgraph.CountNodes(ctx, psq.driver, _spec)
}

func (psq *PaymentStatusQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := psq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (psq *PaymentStatusQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   paymentstatus.Table,
			Columns: paymentstatus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: paymentstatus.FieldID,
			},
		},
		From:   psq.sql,
		Unique: true,
	}
	if ps := psq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := psq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := psq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := psq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (psq *PaymentStatusQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(psq.driver.Dialect())
	t1 := builder.Table(paymentstatus.Table)
	selector := builder.Select(t1.Columns(paymentstatus.Columns...)...).From(t1)
	if psq.sql != nil {
		selector = psq.sql
		selector.Select(selector.Columns(paymentstatus.Columns...)...)
	}
	for _, p := range psq.predicates {
		p(selector)
	}
	for _, p := range psq.order {
		p(selector)
	}
	if offset := psq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := psq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PaymentStatusGroupBy is the builder for group-by PaymentStatus entities.
type PaymentStatusGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (psgb *PaymentStatusGroupBy) Aggregate(fns ...AggregateFunc) *PaymentStatusGroupBy {
	psgb.fns = append(psgb.fns, fns...)
	return psgb
}

// Scan applies the group-by query and scan the result into the given value.
func (psgb *PaymentStatusGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := psgb.path(ctx)
	if err != nil {
		return err
	}
	psgb.sql = query
	return psgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (psgb *PaymentStatusGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := psgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (psgb *PaymentStatusGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(psgb.fields) > 1 {
		return nil, errors.New("ent: PaymentStatusGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := psgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (psgb *PaymentStatusGroupBy) StringsX(ctx context.Context) []string {
	v, err := psgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (psgb *PaymentStatusGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = psgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentstatus.Label}
	default:
		err = fmt.Errorf("ent: PaymentStatusGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (psgb *PaymentStatusGroupBy) StringX(ctx context.Context) string {
	v, err := psgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (psgb *PaymentStatusGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(psgb.fields) > 1 {
		return nil, errors.New("ent: PaymentStatusGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := psgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (psgb *PaymentStatusGroupBy) IntsX(ctx context.Context) []int {
	v, err := psgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (psgb *PaymentStatusGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = psgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentstatus.Label}
	default:
		err = fmt.Errorf("ent: PaymentStatusGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (psgb *PaymentStatusGroupBy) IntX(ctx context.Context) int {
	v, err := psgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (psgb *PaymentStatusGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(psgb.fields) > 1 {
		return nil, errors.New("ent: PaymentStatusGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := psgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (psgb *PaymentStatusGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := psgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (psgb *PaymentStatusGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = psgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentstatus.Label}
	default:
		err = fmt.Errorf("ent: PaymentStatusGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (psgb *PaymentStatusGroupBy) Float64X(ctx context.Context) float64 {
	v, err := psgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (psgb *PaymentStatusGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(psgb.fields) > 1 {
		return nil, errors.New("ent: PaymentStatusGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := psgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (psgb *PaymentStatusGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := psgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (psgb *PaymentStatusGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = psgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentstatus.Label}
	default:
		err = fmt.Errorf("ent: PaymentStatusGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (psgb *PaymentStatusGroupBy) BoolX(ctx context.Context) bool {
	v, err := psgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (psgb *PaymentStatusGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := psgb.sqlQuery().Query()
	if err := psgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (psgb *PaymentStatusGroupBy) sqlQuery() *sql.Selector {
	selector := psgb.sql
	columns := make([]string, 0, len(psgb.fields)+len(psgb.fns))
	columns = append(columns, psgb.fields...)
	for _, fn := range psgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(psgb.fields...)
}

// PaymentStatusSelect is the builder for select fields of PaymentStatus entities.
type PaymentStatusSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (pss *PaymentStatusSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := pss.path(ctx)
	if err != nil {
		return err
	}
	pss.sql = query
	return pss.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pss *PaymentStatusSelect) ScanX(ctx context.Context, v interface{}) {
	if err := pss.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (pss *PaymentStatusSelect) Strings(ctx context.Context) ([]string, error) {
	if len(pss.fields) > 1 {
		return nil, errors.New("ent: PaymentStatusSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := pss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pss *PaymentStatusSelect) StringsX(ctx context.Context) []string {
	v, err := pss.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (pss *PaymentStatusSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pss.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentstatus.Label}
	default:
		err = fmt.Errorf("ent: PaymentStatusSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pss *PaymentStatusSelect) StringX(ctx context.Context) string {
	v, err := pss.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (pss *PaymentStatusSelect) Ints(ctx context.Context) ([]int, error) {
	if len(pss.fields) > 1 {
		return nil, errors.New("ent: PaymentStatusSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := pss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pss *PaymentStatusSelect) IntsX(ctx context.Context) []int {
	v, err := pss.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (pss *PaymentStatusSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pss.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentstatus.Label}
	default:
		err = fmt.Errorf("ent: PaymentStatusSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pss *PaymentStatusSelect) IntX(ctx context.Context) int {
	v, err := pss.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (pss *PaymentStatusSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(pss.fields) > 1 {
		return nil, errors.New("ent: PaymentStatusSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := pss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pss *PaymentStatusSelect) Float64sX(ctx context.Context) []float64 {
	v, err := pss.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (pss *PaymentStatusSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pss.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentstatus.Label}
	default:
		err = fmt.Errorf("ent: PaymentStatusSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pss *PaymentStatusSelect) Float64X(ctx context.Context) float64 {
	v, err := pss.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (pss *PaymentStatusSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(pss.fields) > 1 {
		return nil, errors.New("ent: PaymentStatusSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := pss.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pss *PaymentStatusSelect) BoolsX(ctx context.Context) []bool {
	v, err := pss.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (pss *PaymentStatusSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pss.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentstatus.Label}
	default:
		err = fmt.Errorf("ent: PaymentStatusSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pss *PaymentStatusSelect) BoolX(ctx context.Context) bool {
	v, err := pss.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pss *PaymentStatusSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := pss.sqlQuery().Query()
	if err := pss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pss *PaymentStatusSelect) sqlQuery() sql.Querier {
	selector := pss.sql
	selector.Select(selector.Columns(pss.fields...)...)
	return selector
}
