// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/theuo/app/ent/payment"
	"github.com/theuo/app/ent/paytype"
	"github.com/theuo/app/ent/predicate"
)

// PayTypeUpdate is the builder for updating PayType entities.
type PayTypeUpdate struct {
	config
	hooks      []Hook
	mutation   *PayTypeMutation
	predicates []predicate.PayType
}

// Where adds a new predicate for the builder.
func (ptu *PayTypeUpdate) Where(ps ...predicate.PayType) *PayTypeUpdate {
	ptu.predicates = append(ptu.predicates, ps...)
	return ptu
}

// SetTypeInfo sets the TypeInfo field.
func (ptu *PayTypeUpdate) SetTypeInfo(s string) *PayTypeUpdate {
	ptu.mutation.SetTypeInfo(s)
	return ptu
}

// AddPaymentIDs adds the payments edge to Payment by ids.
func (ptu *PayTypeUpdate) AddPaymentIDs(ids ...int) *PayTypeUpdate {
	ptu.mutation.AddPaymentIDs(ids...)
	return ptu
}

// AddPayments adds the payments edges to Payment.
func (ptu *PayTypeUpdate) AddPayments(p ...*Payment) *PayTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.AddPaymentIDs(ids...)
}

// Mutation returns the PayTypeMutation object of the builder.
func (ptu *PayTypeUpdate) Mutation() *PayTypeMutation {
	return ptu.mutation
}

// RemovePaymentIDs removes the payments edge to Payment by ids.
func (ptu *PayTypeUpdate) RemovePaymentIDs(ids ...int) *PayTypeUpdate {
	ptu.mutation.RemovePaymentIDs(ids...)
	return ptu
}

// RemovePayments removes payments edges to Payment.
func (ptu *PayTypeUpdate) RemovePayments(p ...*Payment) *PayTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.RemovePaymentIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ptu *PayTypeUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := ptu.mutation.TypeInfo(); ok {
		if err := paytype.TypeInfoValidator(v); err != nil {
			return 0, &ValidationError{Name: "TypeInfo", err: fmt.Errorf("ent: validator failed for field \"TypeInfo\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(ptu.hooks) == 0 {
		affected, err = ptu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PayTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ptu.mutation = mutation
			affected, err = ptu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ptu.hooks) - 1; i >= 0; i-- {
			mut = ptu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *PayTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *PayTypeUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *PayTypeUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ptu *PayTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   paytype.Table,
			Columns: paytype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: paytype.FieldID,
			},
		},
	}
	if ps := ptu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.TypeInfo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paytype.FieldTypeInfo,
		})
	}
	if nodes := ptu.mutation.RemovedPaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paytype.PaymentsTable,
			Columns: []string{paytype.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paytype.PaymentsTable,
			Columns: []string{paytype.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paytype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PayTypeUpdateOne is the builder for updating a single PayType entity.
type PayTypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *PayTypeMutation
}

// SetTypeInfo sets the TypeInfo field.
func (ptuo *PayTypeUpdateOne) SetTypeInfo(s string) *PayTypeUpdateOne {
	ptuo.mutation.SetTypeInfo(s)
	return ptuo
}

// AddPaymentIDs adds the payments edge to Payment by ids.
func (ptuo *PayTypeUpdateOne) AddPaymentIDs(ids ...int) *PayTypeUpdateOne {
	ptuo.mutation.AddPaymentIDs(ids...)
	return ptuo
}

// AddPayments adds the payments edges to Payment.
func (ptuo *PayTypeUpdateOne) AddPayments(p ...*Payment) *PayTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.AddPaymentIDs(ids...)
}

// Mutation returns the PayTypeMutation object of the builder.
func (ptuo *PayTypeUpdateOne) Mutation() *PayTypeMutation {
	return ptuo.mutation
}

// RemovePaymentIDs removes the payments edge to Payment by ids.
func (ptuo *PayTypeUpdateOne) RemovePaymentIDs(ids ...int) *PayTypeUpdateOne {
	ptuo.mutation.RemovePaymentIDs(ids...)
	return ptuo
}

// RemovePayments removes payments edges to Payment.
func (ptuo *PayTypeUpdateOne) RemovePayments(p ...*Payment) *PayTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.RemovePaymentIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ptuo *PayTypeUpdateOne) Save(ctx context.Context) (*PayType, error) {
	if v, ok := ptuo.mutation.TypeInfo(); ok {
		if err := paytype.TypeInfoValidator(v); err != nil {
			return nil, &ValidationError{Name: "TypeInfo", err: fmt.Errorf("ent: validator failed for field \"TypeInfo\": %w", err)}
		}
	}

	var (
		err  error
		node *PayType
	)
	if len(ptuo.hooks) == 0 {
		node, err = ptuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PayTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ptuo.mutation = mutation
			node, err = ptuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ptuo.hooks) - 1; i >= 0; i-- {
			mut = ptuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *PayTypeUpdateOne) SaveX(ctx context.Context) *PayType {
	pt, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pt
}

// Exec executes the query on the entity.
func (ptuo *PayTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *PayTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ptuo *PayTypeUpdateOne) sqlSave(ctx context.Context) (pt *PayType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   paytype.Table,
			Columns: paytype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: paytype.FieldID,
			},
		},
	}
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PayType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ptuo.mutation.TypeInfo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paytype.FieldTypeInfo,
		})
	}
	if nodes := ptuo.mutation.RemovedPaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paytype.PaymentsTable,
			Columns: []string{paytype.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paytype.PaymentsTable,
			Columns: []string{paytype.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pt = &PayType{config: ptuo.config}
	_spec.Assign = pt.assignValues
	_spec.ScanValues = pt.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paytype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pt, nil
}
