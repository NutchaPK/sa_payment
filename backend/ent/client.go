// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/theuo/app/ent/migrate"

	"github.com/theuo/app/ent/bill"
	"github.com/theuo/app/ent/billstatus"
	"github.com/theuo/app/ent/payment"
	"github.com/theuo/app/ent/paymentstatus"
	"github.com/theuo/app/ent/paytype"
	"github.com/theuo/app/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Bill is the client for interacting with the Bill builders.
	Bill *BillClient
	// BillStatus is the client for interacting with the BillStatus builders.
	BillStatus *BillStatusClient
	// PayType is the client for interacting with the PayType builders.
	PayType *PayTypeClient
	// Payment is the client for interacting with the Payment builders.
	Payment *PaymentClient
	// PaymentStatus is the client for interacting with the PaymentStatus builders.
	PaymentStatus *PaymentStatusClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Bill = NewBillClient(c.config)
	c.BillStatus = NewBillStatusClient(c.config)
	c.PayType = NewPayTypeClient(c.config)
	c.Payment = NewPaymentClient(c.config)
	c.PaymentStatus = NewPaymentStatusClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Bill:          NewBillClient(cfg),
		BillStatus:    NewBillStatusClient(cfg),
		PayType:       NewPayTypeClient(cfg),
		Payment:       NewPaymentClient(cfg),
		PaymentStatus: NewPaymentStatusClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:        cfg,
		Bill:          NewBillClient(cfg),
		BillStatus:    NewBillStatusClient(cfg),
		PayType:       NewPayTypeClient(cfg),
		Payment:       NewPaymentClient(cfg),
		PaymentStatus: NewPaymentStatusClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Bill.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Bill.Use(hooks...)
	c.BillStatus.Use(hooks...)
	c.PayType.Use(hooks...)
	c.Payment.Use(hooks...)
	c.PaymentStatus.Use(hooks...)
	c.User.Use(hooks...)
}

// BillClient is a client for the Bill schema.
type BillClient struct {
	config
}

// NewBillClient returns a client for the Bill from the given config.
func NewBillClient(c config) *BillClient {
	return &BillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bill.Hooks(f(g(h())))`.
func (c *BillClient) Use(hooks ...Hook) {
	c.hooks.Bill = append(c.hooks.Bill, hooks...)
}

// Create returns a create builder for Bill.
func (c *BillClient) Create() *BillCreate {
	mutation := newBillMutation(c.config, OpCreate)
	return &BillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Bill.
func (c *BillClient) Update() *BillUpdate {
	mutation := newBillMutation(c.config, OpUpdate)
	return &BillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillClient) UpdateOne(b *Bill) *BillUpdateOne {
	mutation := newBillMutation(c.config, OpUpdateOne, withBill(b))
	return &BillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillClient) UpdateOneID(id int) *BillUpdateOne {
	mutation := newBillMutation(c.config, OpUpdateOne, withBillID(id))
	return &BillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bill.
func (c *BillClient) Delete() *BillDelete {
	mutation := newBillMutation(c.config, OpDelete)
	return &BillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BillClient) DeleteOne(b *Bill) *BillDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BillClient) DeleteOneID(id int) *BillDeleteOne {
	builder := c.Delete().Where(bill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillDeleteOne{builder}
}

// Create returns a query builder for Bill.
func (c *BillClient) Query() *BillQuery {
	return &BillQuery{config: c.config}
}

// Get returns a Bill entity by its id.
func (c *BillClient) Get(ctx context.Context, id int) (*Bill, error) {
	return c.Query().Where(bill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillClient) GetX(ctx context.Context, id int) *Bill {
	b, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return b
}

// QueryBillstatus queries the billstatus edge of a Bill.
func (c *BillClient) QueryBillstatus(b *Bill) *BillStatusQuery {
	query := &BillStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, id),
			sqlgraph.To(billstatus.Table, billstatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bill.BillstatusTable, bill.BillstatusColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPayments queries the payments edge of a Bill.
func (c *BillClient) QueryPayments(b *Bill) *PaymentQuery {
	query := &PaymentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, id),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, bill.PaymentsTable, bill.PaymentsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResident queries the resident edge of a Bill.
func (c *BillClient) QueryResident(b *Bill) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bill.Table, bill.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bill.ResidentTable, bill.ResidentColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillClient) Hooks() []Hook {
	return c.hooks.Bill
}

// BillStatusClient is a client for the BillStatus schema.
type BillStatusClient struct {
	config
}

// NewBillStatusClient returns a client for the BillStatus from the given config.
func NewBillStatusClient(c config) *BillStatusClient {
	return &BillStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `billstatus.Hooks(f(g(h())))`.
func (c *BillStatusClient) Use(hooks ...Hook) {
	c.hooks.BillStatus = append(c.hooks.BillStatus, hooks...)
}

// Create returns a create builder for BillStatus.
func (c *BillStatusClient) Create() *BillStatusCreate {
	mutation := newBillStatusMutation(c.config, OpCreate)
	return &BillStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for BillStatus.
func (c *BillStatusClient) Update() *BillStatusUpdate {
	mutation := newBillStatusMutation(c.config, OpUpdate)
	return &BillStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BillStatusClient) UpdateOne(bs *BillStatus) *BillStatusUpdateOne {
	mutation := newBillStatusMutation(c.config, OpUpdateOne, withBillStatus(bs))
	return &BillStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BillStatusClient) UpdateOneID(id int) *BillStatusUpdateOne {
	mutation := newBillStatusMutation(c.config, OpUpdateOne, withBillStatusID(id))
	return &BillStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BillStatus.
func (c *BillStatusClient) Delete() *BillStatusDelete {
	mutation := newBillStatusMutation(c.config, OpDelete)
	return &BillStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BillStatusClient) DeleteOne(bs *BillStatus) *BillStatusDeleteOne {
	return c.DeleteOneID(bs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BillStatusClient) DeleteOneID(id int) *BillStatusDeleteOne {
	builder := c.Delete().Where(billstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BillStatusDeleteOne{builder}
}

// Create returns a query builder for BillStatus.
func (c *BillStatusClient) Query() *BillStatusQuery {
	return &BillStatusQuery{config: c.config}
}

// Get returns a BillStatus entity by its id.
func (c *BillStatusClient) Get(ctx context.Context, id int) (*BillStatus, error) {
	return c.Query().Where(billstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BillStatusClient) GetX(ctx context.Context, id int) *BillStatus {
	bs, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return bs
}

// QueryBills queries the bills edge of a BillStatus.
func (c *BillStatusClient) QueryBills(bs *BillStatus) *BillQuery {
	query := &BillQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(billstatus.Table, billstatus.FieldID, id),
			sqlgraph.To(bill.Table, bill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, billstatus.BillsTable, billstatus.BillsColumn),
		)
		fromV = sqlgraph.Neighbors(bs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BillStatusClient) Hooks() []Hook {
	return c.hooks.BillStatus
}

// PayTypeClient is a client for the PayType schema.
type PayTypeClient struct {
	config
}

// NewPayTypeClient returns a client for the PayType from the given config.
func NewPayTypeClient(c config) *PayTypeClient {
	return &PayTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paytype.Hooks(f(g(h())))`.
func (c *PayTypeClient) Use(hooks ...Hook) {
	c.hooks.PayType = append(c.hooks.PayType, hooks...)
}

// Create returns a create builder for PayType.
func (c *PayTypeClient) Create() *PayTypeCreate {
	mutation := newPayTypeMutation(c.config, OpCreate)
	return &PayTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for PayType.
func (c *PayTypeClient) Update() *PayTypeUpdate {
	mutation := newPayTypeMutation(c.config, OpUpdate)
	return &PayTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PayTypeClient) UpdateOne(pt *PayType) *PayTypeUpdateOne {
	mutation := newPayTypeMutation(c.config, OpUpdateOne, withPayType(pt))
	return &PayTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PayTypeClient) UpdateOneID(id int) *PayTypeUpdateOne {
	mutation := newPayTypeMutation(c.config, OpUpdateOne, withPayTypeID(id))
	return &PayTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PayType.
func (c *PayTypeClient) Delete() *PayTypeDelete {
	mutation := newPayTypeMutation(c.config, OpDelete)
	return &PayTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PayTypeClient) DeleteOne(pt *PayType) *PayTypeDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PayTypeClient) DeleteOneID(id int) *PayTypeDeleteOne {
	builder := c.Delete().Where(paytype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PayTypeDeleteOne{builder}
}

// Create returns a query builder for PayType.
func (c *PayTypeClient) Query() *PayTypeQuery {
	return &PayTypeQuery{config: c.config}
}

// Get returns a PayType entity by its id.
func (c *PayTypeClient) Get(ctx context.Context, id int) (*PayType, error) {
	return c.Query().Where(paytype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PayTypeClient) GetX(ctx context.Context, id int) *PayType {
	pt, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pt
}

// QueryPayments queries the payments edge of a PayType.
func (c *PayTypeClient) QueryPayments(pt *PayType) *PaymentQuery {
	query := &PaymentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paytype.Table, paytype.FieldID, id),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, paytype.PaymentsTable, paytype.PaymentsColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PayTypeClient) Hooks() []Hook {
	return c.hooks.PayType
}

// PaymentClient is a client for the Payment schema.
type PaymentClient struct {
	config
}

// NewPaymentClient returns a client for the Payment from the given config.
func NewPaymentClient(c config) *PaymentClient {
	return &PaymentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `payment.Hooks(f(g(h())))`.
func (c *PaymentClient) Use(hooks ...Hook) {
	c.hooks.Payment = append(c.hooks.Payment, hooks...)
}

// Create returns a create builder for Payment.
func (c *PaymentClient) Create() *PaymentCreate {
	mutation := newPaymentMutation(c.config, OpCreate)
	return &PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Payment.
func (c *PaymentClient) Update() *PaymentUpdate {
	mutation := newPaymentMutation(c.config, OpUpdate)
	return &PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentClient) UpdateOne(pa *Payment) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPayment(pa))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentClient) UpdateOneID(id int) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPaymentID(id))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Payment.
func (c *PaymentClient) Delete() *PaymentDelete {
	mutation := newPaymentMutation(c.config, OpDelete)
	return &PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PaymentClient) DeleteOne(pa *Payment) *PaymentDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PaymentClient) DeleteOneID(id int) *PaymentDeleteOne {
	builder := c.Delete().Where(payment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentDeleteOne{builder}
}

// Create returns a query builder for Payment.
func (c *PaymentClient) Query() *PaymentQuery {
	return &PaymentQuery{config: c.config}
}

// Get returns a Payment entity by its id.
func (c *PaymentClient) Get(ctx context.Context, id int) (*Payment, error) {
	return c.Query().Where(payment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentClient) GetX(ctx context.Context, id int) *Payment {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryPaytype queries the paytype edge of a Payment.
func (c *PaymentClient) QueryPaytype(pa *Payment) *PayTypeQuery {
	query := &PayTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payment.Table, payment.FieldID, id),
			sqlgraph.To(paytype.Table, paytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, payment.PaytypeTable, payment.PaytypeColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPaymentstatus queries the paymentstatus edge of a Payment.
func (c *PaymentClient) QueryPaymentstatus(pa *Payment) *PaymentStatusQuery {
	query := &PaymentStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payment.Table, payment.FieldID, id),
			sqlgraph.To(paymentstatus.Table, paymentstatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, payment.PaymentstatusTable, payment.PaymentstatusColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBill queries the bill edge of a Payment.
func (c *PaymentClient) QueryBill(pa *Payment) *BillQuery {
	query := &BillQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payment.Table, payment.FieldID, id),
			sqlgraph.To(bill.Table, bill.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, payment.BillTable, payment.BillColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentClient) Hooks() []Hook {
	return c.hooks.Payment
}

// PaymentStatusClient is a client for the PaymentStatus schema.
type PaymentStatusClient struct {
	config
}

// NewPaymentStatusClient returns a client for the PaymentStatus from the given config.
func NewPaymentStatusClient(c config) *PaymentStatusClient {
	return &PaymentStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentstatus.Hooks(f(g(h())))`.
func (c *PaymentStatusClient) Use(hooks ...Hook) {
	c.hooks.PaymentStatus = append(c.hooks.PaymentStatus, hooks...)
}

// Create returns a create builder for PaymentStatus.
func (c *PaymentStatusClient) Create() *PaymentStatusCreate {
	mutation := newPaymentStatusMutation(c.config, OpCreate)
	return &PaymentStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for PaymentStatus.
func (c *PaymentStatusClient) Update() *PaymentStatusUpdate {
	mutation := newPaymentStatusMutation(c.config, OpUpdate)
	return &PaymentStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentStatusClient) UpdateOne(ps *PaymentStatus) *PaymentStatusUpdateOne {
	mutation := newPaymentStatusMutation(c.config, OpUpdateOne, withPaymentStatus(ps))
	return &PaymentStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentStatusClient) UpdateOneID(id int) *PaymentStatusUpdateOne {
	mutation := newPaymentStatusMutation(c.config, OpUpdateOne, withPaymentStatusID(id))
	return &PaymentStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentStatus.
func (c *PaymentStatusClient) Delete() *PaymentStatusDelete {
	mutation := newPaymentStatusMutation(c.config, OpDelete)
	return &PaymentStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PaymentStatusClient) DeleteOne(ps *PaymentStatus) *PaymentStatusDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PaymentStatusClient) DeleteOneID(id int) *PaymentStatusDeleteOne {
	builder := c.Delete().Where(paymentstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentStatusDeleteOne{builder}
}

// Create returns a query builder for PaymentStatus.
func (c *PaymentStatusClient) Query() *PaymentStatusQuery {
	return &PaymentStatusQuery{config: c.config}
}

// Get returns a PaymentStatus entity by its id.
func (c *PaymentStatusClient) Get(ctx context.Context, id int) (*PaymentStatus, error) {
	return c.Query().Where(paymentstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentStatusClient) GetX(ctx context.Context, id int) *PaymentStatus {
	ps, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ps
}

// QueryPayments queries the payments edge of a PaymentStatus.
func (c *PaymentStatusClient) QueryPayments(ps *PaymentStatus) *PaymentQuery {
	query := &PaymentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentstatus.Table, paymentstatus.FieldID, id),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, paymentstatus.PaymentsTable, paymentstatus.PaymentsColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentStatusClient) Hooks() []Hook {
	return c.hooks.PaymentStatus
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryBills queries the bills edge of a User.
func (c *UserClient) QueryBills(u *User) *BillQuery {
	query := &BillQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(bill.Table, bill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.BillsTable, user.BillsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
