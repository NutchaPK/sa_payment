// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/theuo/app/ent/payment"
	"github.com/theuo/app/ent/paymentstatus"
	"github.com/theuo/app/ent/predicate"
)

// PaymentStatusUpdate is the builder for updating PaymentStatus entities.
type PaymentStatusUpdate struct {
	config
	hooks      []Hook
	mutation   *PaymentStatusMutation
	predicates []predicate.PaymentStatus
}

// Where adds a new predicate for the builder.
func (psu *PaymentStatusUpdate) Where(ps ...predicate.PaymentStatus) *PaymentStatusUpdate {
	psu.predicates = append(psu.predicates, ps...)
	return psu
}

// SetPaymentStatus sets the PaymentStatus field.
func (psu *PaymentStatusUpdate) SetPaymentStatus(s string) *PaymentStatusUpdate {
	psu.mutation.SetPaymentStatus(s)
	return psu
}

// AddPaymentIDs adds the payments edge to Payment by ids.
func (psu *PaymentStatusUpdate) AddPaymentIDs(ids ...int) *PaymentStatusUpdate {
	psu.mutation.AddPaymentIDs(ids...)
	return psu
}

// AddPayments adds the payments edges to Payment.
func (psu *PaymentStatusUpdate) AddPayments(p ...*Payment) *PaymentStatusUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.AddPaymentIDs(ids...)
}

// Mutation returns the PaymentStatusMutation object of the builder.
func (psu *PaymentStatusUpdate) Mutation() *PaymentStatusMutation {
	return psu.mutation
}

// RemovePaymentIDs removes the payments edge to Payment by ids.
func (psu *PaymentStatusUpdate) RemovePaymentIDs(ids ...int) *PaymentStatusUpdate {
	psu.mutation.RemovePaymentIDs(ids...)
	return psu
}

// RemovePayments removes payments edges to Payment.
func (psu *PaymentStatusUpdate) RemovePayments(p ...*Payment) *PaymentStatusUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.RemovePaymentIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (psu *PaymentStatusUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := psu.mutation.PaymentStatus(); ok {
		if err := paymentstatus.PaymentStatusValidator(v); err != nil {
			return 0, &ValidationError{Name: "PaymentStatus", err: fmt.Errorf("ent: validator failed for field \"PaymentStatus\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(psu.hooks) == 0 {
		affected, err = psu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentStatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			psu.mutation = mutation
			affected, err = psu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(psu.hooks) - 1; i >= 0; i-- {
			mut = psu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PaymentStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PaymentStatusUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PaymentStatusUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psu *PaymentStatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   paymentstatus.Table,
			Columns: paymentstatus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: paymentstatus.FieldID,
			},
		},
	}
	if ps := psu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.PaymentStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentstatus.FieldPaymentStatus,
		})
	}
	if nodes := psu.mutation.RemovedPaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentstatus.PaymentsTable,
			Columns: []string{paymentstatus.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentstatus.PaymentsTable,
			Columns: []string{paymentstatus.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentstatus.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PaymentStatusUpdateOne is the builder for updating a single PaymentStatus entity.
type PaymentStatusUpdateOne struct {
	config
	hooks    []Hook
	mutation *PaymentStatusMutation
}

// SetPaymentStatus sets the PaymentStatus field.
func (psuo *PaymentStatusUpdateOne) SetPaymentStatus(s string) *PaymentStatusUpdateOne {
	psuo.mutation.SetPaymentStatus(s)
	return psuo
}

// AddPaymentIDs adds the payments edge to Payment by ids.
func (psuo *PaymentStatusUpdateOne) AddPaymentIDs(ids ...int) *PaymentStatusUpdateOne {
	psuo.mutation.AddPaymentIDs(ids...)
	return psuo
}

// AddPayments adds the payments edges to Payment.
func (psuo *PaymentStatusUpdateOne) AddPayments(p ...*Payment) *PaymentStatusUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.AddPaymentIDs(ids...)
}

// Mutation returns the PaymentStatusMutation object of the builder.
func (psuo *PaymentStatusUpdateOne) Mutation() *PaymentStatusMutation {
	return psuo.mutation
}

// RemovePaymentIDs removes the payments edge to Payment by ids.
func (psuo *PaymentStatusUpdateOne) RemovePaymentIDs(ids ...int) *PaymentStatusUpdateOne {
	psuo.mutation.RemovePaymentIDs(ids...)
	return psuo
}

// RemovePayments removes payments edges to Payment.
func (psuo *PaymentStatusUpdateOne) RemovePayments(p ...*Payment) *PaymentStatusUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.RemovePaymentIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (psuo *PaymentStatusUpdateOne) Save(ctx context.Context) (*PaymentStatus, error) {
	if v, ok := psuo.mutation.PaymentStatus(); ok {
		if err := paymentstatus.PaymentStatusValidator(v); err != nil {
			return nil, &ValidationError{Name: "PaymentStatus", err: fmt.Errorf("ent: validator failed for field \"PaymentStatus\": %w", err)}
		}
	}

	var (
		err  error
		node *PaymentStatus
	)
	if len(psuo.hooks) == 0 {
		node, err = psuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentStatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			psuo.mutation = mutation
			node, err = psuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(psuo.hooks) - 1; i >= 0; i-- {
			mut = psuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PaymentStatusUpdateOne) SaveX(ctx context.Context) *PaymentStatus {
	ps, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ps
}

// Exec executes the query on the entity.
func (psuo *PaymentStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PaymentStatusUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psuo *PaymentStatusUpdateOne) sqlSave(ctx context.Context) (ps *PaymentStatus, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   paymentstatus.Table,
			Columns: paymentstatus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: paymentstatus.FieldID,
			},
		},
	}
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PaymentStatus.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := psuo.mutation.PaymentStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentstatus.FieldPaymentStatus,
		})
	}
	if nodes := psuo.mutation.RemovedPaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentstatus.PaymentsTable,
			Columns: []string{paymentstatus.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymentstatus.PaymentsTable,
			Columns: []string{paymentstatus.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	ps = &PaymentStatus{config: psuo.config}
	_spec.Assign = ps.assignValues
	_spec.ScanValues = ps.scanValues()
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentstatus.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ps, nil
}
