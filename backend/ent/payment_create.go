// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/theuo/app/ent/bill"
	"github.com/theuo/app/ent/payment"
	"github.com/theuo/app/ent/paymentstatus"
	"github.com/theuo/app/ent/paytype"
)

// PaymentCreate is the builder for creating a Payment entity.
type PaymentCreate struct {
	config
	mutation *PaymentMutation
	hooks    []Hook
}

// SetAddDatetime sets the AddDatetime field.
func (pc *PaymentCreate) SetAddDatetime(t time.Time) *PaymentCreate {
	pc.mutation.SetAddDatetime(t)
	return pc
}

// SetPaytypeID sets the paytype edge to PayType by id.
func (pc *PaymentCreate) SetPaytypeID(id int) *PaymentCreate {
	pc.mutation.SetPaytypeID(id)
	return pc
}

// SetNillablePaytypeID sets the paytype edge to PayType by id if the given value is not nil.
func (pc *PaymentCreate) SetNillablePaytypeID(id *int) *PaymentCreate {
	if id != nil {
		pc = pc.SetPaytypeID(*id)
	}
	return pc
}

// SetPaytype sets the paytype edge to PayType.
func (pc *PaymentCreate) SetPaytype(p *PayType) *PaymentCreate {
	return pc.SetPaytypeID(p.ID)
}

// SetPaymentstatusID sets the paymentstatus edge to PaymentStatus by id.
func (pc *PaymentCreate) SetPaymentstatusID(id int) *PaymentCreate {
	pc.mutation.SetPaymentstatusID(id)
	return pc
}

// SetNillablePaymentstatusID sets the paymentstatus edge to PaymentStatus by id if the given value is not nil.
func (pc *PaymentCreate) SetNillablePaymentstatusID(id *int) *PaymentCreate {
	if id != nil {
		pc = pc.SetPaymentstatusID(*id)
	}
	return pc
}

// SetPaymentstatus sets the paymentstatus edge to PaymentStatus.
func (pc *PaymentCreate) SetPaymentstatus(p *PaymentStatus) *PaymentCreate {
	return pc.SetPaymentstatusID(p.ID)
}

// SetBillID sets the bill edge to Bill by id.
func (pc *PaymentCreate) SetBillID(id int) *PaymentCreate {
	pc.mutation.SetBillID(id)
	return pc
}

// SetNillableBillID sets the bill edge to Bill by id if the given value is not nil.
func (pc *PaymentCreate) SetNillableBillID(id *int) *PaymentCreate {
	if id != nil {
		pc = pc.SetBillID(*id)
	}
	return pc
}

// SetBill sets the bill edge to Bill.
func (pc *PaymentCreate) SetBill(b *Bill) *PaymentCreate {
	return pc.SetBillID(b.ID)
}

// Mutation returns the PaymentMutation object of the builder.
func (pc *PaymentCreate) Mutation() *PaymentMutation {
	return pc.mutation
}

// Save creates the Payment in the database.
func (pc *PaymentCreate) Save(ctx context.Context) (*Payment, error) {
	if _, ok := pc.mutation.AddDatetime(); !ok {
		return nil, &ValidationError{Name: "AddDatetime", err: errors.New("ent: missing required field \"AddDatetime\"")}
	}
	var (
		err  error
		node *Payment
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PaymentCreate) SaveX(ctx context.Context) *Payment {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PaymentCreate) sqlSave(ctx context.Context) (*Payment, error) {
	pa, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pa.ID = int(id)
	return pa, nil
}

func (pc *PaymentCreate) createSpec() (*Payment, *sqlgraph.CreateSpec) {
	var (
		pa    = &Payment{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: payment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: payment.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.AddDatetime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldAddDatetime,
		})
		pa.AddDatetime = value
	}
	if nodes := pc.mutation.PaytypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PaytypeTable,
			Columns: []string{payment.PaytypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: paytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PaymentstatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PaymentstatusTable,
			Columns: []string{payment.PaymentstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: paymentstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.BillIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   payment.BillTable,
			Columns: []string{payment.BillColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pa, _spec
}
