/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersBill,
    ControllersBillFromJSON,
    ControllersBillToJSON,
    ControllersPayment,
    ControllersPaymentFromJSON,
    ControllersPaymentToJSON,
    EntBill,
    EntBillFromJSON,
    EntBillToJSON,
    EntBillStatus,
    EntBillStatusFromJSON,
    EntBillStatusToJSON,
    EntPayType,
    EntPayTypeFromJSON,
    EntPayTypeToJSON,
    EntPayment,
    EntPaymentFromJSON,
    EntPaymentToJSON,
    EntPaymentStatus,
    EntPaymentStatusFromJSON,
    EntPaymentStatusToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
} from '../models';

export interface CreateBillRequest {
    bill: ControllersBill;
}

export interface CreateBillstatusRequest {
    billstatus: EntBillStatus;
}

export interface CreatePaymentRequest {
    payment: ControllersPayment;
}

export interface CreatePaymentstatusRequest {
    paymentstatus: EntPaymentStatus;
}

export interface CreatePaytypeRequest {
    paytype: EntPayType;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface DeleteBillRequest {
    id: number;
}

export interface DeleteBillstatusRequest {
    id: number;
}

export interface DeletePaymentRequest {
    id: number;
}

export interface DeletePaymentstatusRequest {
    id: number;
}

export interface DeletePaytypeRequest {
    id: number;
}

export interface DeleteUserRequest {
    id: number;
}

export interface GetBillRequest {
    id: number;
}

export interface GetBillstatusRequest {
    id: number;
}

export interface GetPaymentRequest {
    id: number;
}

export interface GetPaymentstatusRequest {
    id: number;
}

export interface GetPaytypeRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface ListBillRequest {
    limit?: number;
    offset?: number;
}

export interface ListBillstatusRequest {
    limit?: number;
    offset?: number;
}

export interface ListPaymentRequest {
    limit?: number;
    offset?: number;
}

export interface ListPaymentstatusRequest {
    limit?: number;
    offset?: number;
}

export interface ListPaytypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateBillRequest {
    id: number;
    bill: EntBill;
}

export interface UpdateBillstatusRequest {
    id: number;
    billstatus: EntBillStatus;
}

export interface UpdatePaymentRequest {
    id: number;
    payment: EntPayment;
}

export interface UpdatePaymentstatusRequest {
    id: number;
    paymentstatus: EntPaymentStatus;
}

export interface UpdatePaytypeRequest {
    id: number;
    paytype: EntPayType;
}

export interface UpdateUserRequest {
    id: number;
    user: EntUser;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create bill
     * Create bill
     */
    async createBillRaw(requestParameters: CreateBillRequest): Promise<runtime.ApiResponse<EntBill>> {
        if (requestParameters.bill === null || requestParameters.bill === undefined) {
            throw new runtime.RequiredError('bill','Required parameter requestParameters.bill was null or undefined when calling createBill.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bill`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersBillToJSON(requestParameters.bill),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBillFromJSON(jsonValue));
    }

    /**
     * Create bill
     * Create bill
     */
    async createBill(requestParameters: CreateBillRequest): Promise<EntBill> {
        const response = await this.createBillRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create billstatus
     * Create billstatus
     */
    async createBillstatusRaw(requestParameters: CreateBillstatusRequest): Promise<runtime.ApiResponse<EntBillStatus>> {
        if (requestParameters.billstatus === null || requestParameters.billstatus === undefined) {
            throw new runtime.RequiredError('billstatus','Required parameter requestParameters.billstatus was null or undefined when calling createBillstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/billstatus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntBillStatusToJSON(requestParameters.billstatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBillStatusFromJSON(jsonValue));
    }

    /**
     * Create billstatus
     * Create billstatus
     */
    async createBillstatus(requestParameters: CreateBillstatusRequest): Promise<EntBillStatus> {
        const response = await this.createBillstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create payment
     * Create payment
     */
    async createPaymentRaw(requestParameters: CreatePaymentRequest): Promise<runtime.ApiResponse<EntPayment>> {
        if (requestParameters.payment === null || requestParameters.payment === undefined) {
            throw new runtime.RequiredError('payment','Required parameter requestParameters.payment was null or undefined when calling createPayment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/payment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersPaymentToJSON(requestParameters.payment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymentFromJSON(jsonValue));
    }

    /**
     * Create payment
     * Create payment
     */
    async createPayment(requestParameters: CreatePaymentRequest): Promise<EntPayment> {
        const response = await this.createPaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create paymentstatus
     * Create paymentstatus
     */
    async createPaymentstatusRaw(requestParameters: CreatePaymentstatusRequest): Promise<runtime.ApiResponse<EntPaymentStatus>> {
        if (requestParameters.paymentstatus === null || requestParameters.paymentstatus === undefined) {
            throw new runtime.RequiredError('paymentstatus','Required parameter requestParameters.paymentstatus was null or undefined when calling createPaymentstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/paymentstatus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPaymentStatusToJSON(requestParameters.paymentstatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymentStatusFromJSON(jsonValue));
    }

    /**
     * Create paymentstatus
     * Create paymentstatus
     */
    async createPaymentstatus(requestParameters: CreatePaymentstatusRequest): Promise<EntPaymentStatus> {
        const response = await this.createPaymentstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create paytype
     * Create paytype
     */
    async createPaytypeRaw(requestParameters: CreatePaytypeRequest): Promise<runtime.ApiResponse<EntPayType>> {
        if (requestParameters.paytype === null || requestParameters.paytype === undefined) {
            throw new runtime.RequiredError('paytype','Required parameter requestParameters.paytype was null or undefined when calling createPaytype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/paytype`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPayTypeToJSON(requestParameters.paytype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPayTypeFromJSON(jsonValue));
    }

    /**
     * Create paytype
     * Create paytype
     */
    async createPaytype(requestParameters: CreatePaytypeRequest): Promise<EntPayType> {
        const response = await this.createPaytypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bill by ID
     * Delete a bill entity by ID
     */
    async deleteBillRaw(requestParameters: DeleteBillRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBill.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bill/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get bill by ID
     * Delete a bill entity by ID
     */
    async deleteBill(requestParameters: DeleteBillRequest): Promise<object> {
        const response = await this.deleteBillRaw(requestParameters);
        return await response.value();
    }

    /**
     * get billstatus by ID
     * Delete a billstatus entity by ID
     */
    async deleteBillstatusRaw(requestParameters: DeleteBillstatusRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBillstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/billstatus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get billstatus by ID
     * Delete a billstatus entity by ID
     */
    async deleteBillstatus(requestParameters: DeleteBillstatusRequest): Promise<object> {
        const response = await this.deleteBillstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get payment by ID
     * Delete a payment entity by ID
     */
    async deletePaymentRaw(requestParameters: DeletePaymentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePayment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get payment by ID
     * Delete a payment entity by ID
     */
    async deletePayment(requestParameters: DeletePaymentRequest): Promise<object> {
        const response = await this.deletePaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get paymentstatus by ID
     * Delete a paymentstatus entity by ID
     */
    async deletePaymentstatusRaw(requestParameters: DeletePaymentstatusRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePaymentstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/paymentstatus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get paymentstatus by ID
     * Delete a paymentstatus entity by ID
     */
    async deletePaymentstatus(requestParameters: DeletePaymentstatusRequest): Promise<object> {
        const response = await this.deletePaymentstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get paytype by ID
     * Delete a paytype entity by ID
     */
    async deletePaytypeRaw(requestParameters: DeletePaytypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePaytype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/paytype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get paytype by ID
     * Delete a paytype entity by ID
     */
    async deletePaytype(requestParameters: DeletePaytypeRequest): Promise<object> {
        const response = await this.deletePaytypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bill by ID
     * Get a bill entity by ID
     */
    async getBillRaw(requestParameters: GetBillRequest): Promise<runtime.ApiResponse<EntBill>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBill.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bill/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBillFromJSON(jsonValue));
    }

    /**
     * get bill by ID
     * Get a bill entity by ID
     */
    async getBill(requestParameters: GetBillRequest): Promise<EntBill> {
        const response = await this.getBillRaw(requestParameters);
        return await response.value();
    }

    /**
     * get billstatus by ID
     * Get a billstatus entity by ID
     */
    async getBillstatusRaw(requestParameters: GetBillstatusRequest): Promise<runtime.ApiResponse<EntBillStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBillstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/billstatus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBillStatusFromJSON(jsonValue));
    }

    /**
     * get billstatus by ID
     * Get a billstatus entity by ID
     */
    async getBillstatus(requestParameters: GetBillstatusRequest): Promise<EntBillStatus> {
        const response = await this.getBillstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get payment by ID
     * Get a payment entity by ID
     */
    async getPaymentRaw(requestParameters: GetPaymentRequest): Promise<runtime.ApiResponse<EntPayment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPayment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymentFromJSON(jsonValue));
    }

    /**
     * get payment by ID
     * Get a payment entity by ID
     */
    async getPayment(requestParameters: GetPaymentRequest): Promise<EntPayment> {
        const response = await this.getPaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get paymentstatus by ID
     * Get a paymentstatus entity by ID
     */
    async getPaymentstatusRaw(requestParameters: GetPaymentstatusRequest): Promise<runtime.ApiResponse<EntPaymentStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPaymentstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/paymentstatus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymentStatusFromJSON(jsonValue));
    }

    /**
     * get paymentstatus by ID
     * Get a paymentstatus entity by ID
     */
    async getPaymentstatus(requestParameters: GetPaymentstatusRequest): Promise<EntPaymentStatus> {
        const response = await this.getPaymentstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get paytype by ID
     * Get a paytype entity by ID
     */
    async getPaytypeRaw(requestParameters: GetPaytypeRequest): Promise<runtime.ApiResponse<EntPayType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPaytype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/paytype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPayTypeFromJSON(jsonValue));
    }

    /**
     * get paytype by ID
     * Get a paytype entity by ID
     */
    async getPaytype(requestParameters: GetPaytypeRequest): Promise<EntPayType> {
        const response = await this.getPaytypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list bill entities
     * List bill entities
     */
    async listBillRaw(requestParameters: ListBillRequest): Promise<runtime.ApiResponse<Array<EntBill>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bill`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBillFromJSON));
    }

    /**
     * list bill entities
     * List bill entities
     */
    async listBill(requestParameters: ListBillRequest): Promise<Array<EntBill>> {
        const response = await this.listBillRaw(requestParameters);
        return await response.value();
    }

    /**
     * list billstatus entities
     * List billstatus entities
     */
    async listBillstatusRaw(requestParameters: ListBillstatusRequest): Promise<runtime.ApiResponse<Array<EntBillStatus>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/billstatus`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBillStatusFromJSON));
    }

    /**
     * list billstatus entities
     * List billstatus entities
     */
    async listBillstatus(requestParameters: ListBillstatusRequest): Promise<Array<EntBillStatus>> {
        const response = await this.listBillstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * list payment entities
     * List payment entities
     */
    async listPaymentRaw(requestParameters: ListPaymentRequest): Promise<runtime.ApiResponse<Array<EntPayment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payment`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPaymentFromJSON));
    }

    /**
     * list payment entities
     * List payment entities
     */
    async listPayment(requestParameters: ListPaymentRequest): Promise<Array<EntPayment>> {
        const response = await this.listPaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list paymentstatus entities
     * List paymentstatus entities
     */
    async listPaymentstatusRaw(requestParameters: ListPaymentstatusRequest): Promise<runtime.ApiResponse<Array<EntPaymentStatus>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/paymentstatus`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPaymentStatusFromJSON));
    }

    /**
     * list paymentstatus entities
     * List paymentstatus entities
     */
    async listPaymentstatus(requestParameters: ListPaymentstatusRequest): Promise<Array<EntPaymentStatus>> {
        const response = await this.listPaymentstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * list paytype entities
     * List paytype entities
     */
    async listPaytypeRaw(requestParameters: ListPaytypeRequest): Promise<runtime.ApiResponse<Array<EntPayType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/paytype`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPayTypeFromJSON));
    }

    /**
     * list paytype entities
     * List paytype entities
     */
    async listPaytype(requestParameters: ListPaytypeRequest): Promise<Array<EntPayType>> {
        const response = await this.listPaytypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * update bill by ID
     * Update a bill entity by ID
     */
    async updateBillRaw(requestParameters: UpdateBillRequest): Promise<runtime.ApiResponse<EntBill>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBill.');
        }

        if (requestParameters.bill === null || requestParameters.bill === undefined) {
            throw new runtime.RequiredError('bill','Required parameter requestParameters.bill was null or undefined when calling updateBill.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bill/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntBillToJSON(requestParameters.bill),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBillFromJSON(jsonValue));
    }

    /**
     * update bill by ID
     * Update a bill entity by ID
     */
    async updateBill(requestParameters: UpdateBillRequest): Promise<EntBill> {
        const response = await this.updateBillRaw(requestParameters);
        return await response.value();
    }

    /**
     * update billstatus by ID
     * Update a billstatus entity by ID
     */
    async updateBillstatusRaw(requestParameters: UpdateBillstatusRequest): Promise<runtime.ApiResponse<EntBillStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBillstatus.');
        }

        if (requestParameters.billstatus === null || requestParameters.billstatus === undefined) {
            throw new runtime.RequiredError('billstatus','Required parameter requestParameters.billstatus was null or undefined when calling updateBillstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/billstatus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntBillStatusToJSON(requestParameters.billstatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBillStatusFromJSON(jsonValue));
    }

    /**
     * update billstatus by ID
     * Update a billstatus entity by ID
     */
    async updateBillstatus(requestParameters: UpdateBillstatusRequest): Promise<EntBillStatus> {
        const response = await this.updateBillstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * update payment by ID
     * Update a payment entity by ID
     */
    async updatePaymentRaw(requestParameters: UpdatePaymentRequest): Promise<runtime.ApiResponse<EntPayment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePayment.');
        }

        if (requestParameters.payment === null || requestParameters.payment === undefined) {
            throw new runtime.RequiredError('payment','Required parameter requestParameters.payment was null or undefined when calling updatePayment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/payment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPaymentToJSON(requestParameters.payment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymentFromJSON(jsonValue));
    }

    /**
     * update payment by ID
     * Update a payment entity by ID
     */
    async updatePayment(requestParameters: UpdatePaymentRequest): Promise<EntPayment> {
        const response = await this.updatePaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * update paymentstatus by ID
     * Update a paymentstatus entity by ID
     */
    async updatePaymentstatusRaw(requestParameters: UpdatePaymentstatusRequest): Promise<runtime.ApiResponse<EntPaymentStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePaymentstatus.');
        }

        if (requestParameters.paymentstatus === null || requestParameters.paymentstatus === undefined) {
            throw new runtime.RequiredError('paymentstatus','Required parameter requestParameters.paymentstatus was null or undefined when calling updatePaymentstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/paymentstatus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPaymentStatusToJSON(requestParameters.paymentstatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymentStatusFromJSON(jsonValue));
    }

    /**
     * update paymentstatus by ID
     * Update a paymentstatus entity by ID
     */
    async updatePaymentstatus(requestParameters: UpdatePaymentstatusRequest): Promise<EntPaymentStatus> {
        const response = await this.updatePaymentstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * update paytype by ID
     * Update a paytype entity by ID
     */
    async updatePaytypeRaw(requestParameters: UpdatePaytypeRequest): Promise<runtime.ApiResponse<EntPayType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePaytype.');
        }

        if (requestParameters.paytype === null || requestParameters.paytype === undefined) {
            throw new runtime.RequiredError('paytype','Required parameter requestParameters.paytype was null or undefined when calling updatePaytype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/paytype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPayTypeToJSON(requestParameters.paytype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPayTypeFromJSON(jsonValue));
    }

    /**
     * update paytype by ID
     * Update a paytype entity by ID
     */
    async updatePaytype(requestParameters: UpdatePaytypeRequest): Promise<EntPayType> {
        const response = await this.updatePaytypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<EntUser> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

}
